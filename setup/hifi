#!/bin/bash

HIFIBASEDIR="/opt/hifi"

source $HIFIBASEDIR/env.conf

function doContinue() {
ANS=""

while [[ ! $ANS =~ ^([yY][eE][sS]|[yY])$ ]]
    do
        if [[ $ANS =~ ^([nN][oO]|[nN])$ ]]
            then
                return 1
            else
                read -p "Continue y/n? " ANS
        fi

        if [[ $ANS =~ ^([yY][eE][sS]|[yY])$ ]]
            then
                return 0
        fi
    done
}

function setPerms()  {
  if [ -d "$HIFIBASEDIR/live" ]; then
    chown -R hifi:hifi $HIFIBASEDIR/live
  fi
}

function getHelp() {
    echo " --save                 : Creates a backup of the live codebase."
    echo " --status               : give status info on the hifi services."
    echo " --update               : Creates a backup of the current live folder then updates the code."
    echo " --update-hifi-server   : Updates this build tool."
    echo " --restore              : Restore code from one of the last backups."
    echo " --stop                 : stops Hifi."
    echo " --start                : Starts Hifi."
    echo " --restart              : Restarts Hifi."
    echo " --update-by-tag        : Choose tag name to build."
    echo " --release-source       : change between dev and production mode."
}

function doSave() { #TODO: probably should figure out where the entities are stored and back them up as well.

    STAMP=`date +%Y-%m-%d_%H-%M-%S`

    if [ "$1" == "verbose" ]
        then
            tar -zcvf $HIFIBASEDIR/backup/temp/SOURCE.tar.gz -C $HIFIBASEDIR/live/build .
            echo "#### BUILD SOURCE SAVED ####"
            sleep 2
            tar -zcvf $HIFIBASEDIR/backup/temp/SERVER.tar.gz -C $HIFIBASEDIR/live/server-files .
            echo "#### SERVER FILES SAVED ####"
            sleep 2
        else
            tar -zcf $HIFIBASEDIR/backup/temp/SOURCE.tar.gz -C $HIFIBASEDIR/live/build .
            tar -zcf $HIFIBASEDIR/backup/temp/SERVER.tar.gz -C $HIFIBASEDIR/live/server-files .
    fi

    tar -cf $HIFIBASEDIR/backup/backups/BACKUP_$STAMP.tar -C $HIFIBASEDIR/backup/temp .

    rm -rf $HIFIBASEDIR/backup/temp/*

    echo "saved IN $HIFIBASEDIR/backup/backups/BACKUP_$STAMP.tar ON `date`"
}

function getStatus() {
    systemctl status domain-server.service
    systemctl status assignment-client.service
}

function doUpdate() {

    if doContinue $1;
        then
            doSave verbose

            cd $HIFIBASEDIR/source

            if $PRODUCTION;
                then
                    git pull origin stable
                else
                    git pull origin master
            fi
            git fetch

            LATEST=$(git describe --abbrev=0 --tags)
            git checkout -f tags/$LATEST

            rm -rf $HIFIBASEDIR/build/*

            cd $HIFIBASEDIR/build

            source scl_source enable devtoolset-4

            if $PRODUCTION;
                then
                    RELEASE_TYPE=PRODUCTION RELEASE_NUMBER=$(echo $LATEST | cut -d'-' -f2) cmake3 -DSERVER_ONLY=TRUE -DDCMAKE_BUILD_TYPE=Release $HIFIBASEDIR/source
                else
                    RELEASE_NUMBER=$(echo $LATEST | cut -d'-' -f2) cmake3 -DSERVER_ONLY=TRUE -DDCMAKE_BUILD_TYPE=Release $HIFIBASEDIR/source
            fi

            make domain-server && make assignment-client

            stopHifi

            rm -rf $HIFIBASEDIR/live/build/*

            cp -R $HIFIBASEDIR/build/* $HIFIBASEDIR/live/build

            setPerms
            startHifi
        else
            exit
    fi
}

function updateHifiServer() {

    cd $HIFIBASEDIR/hifi-server
    git pull origin master
    git fetch
    LATEST=$(git describe --abbrev=0 --tags)
    git checkout -f tags/$LATEST

    yes | cp -f $HIFIBASEDIR/hifi-server/setup/assignment-client.service /etc/systemd/system/assignment-client.service
    yes | cp -f $HIFIBASEDIR/hifi-server/setup/domain-server.service /etc/systemd/system/domain-server.service

    systemctl daemon-reload

    yes | cp -f $HIFIBASEDIR/hifi-server/setup/hifi /usr/local/bin/hifi 2>/dev/null

    chmod 755 /usr/local/bin/hifi

}

function doRestore() {

    echo "Listing backup files:"

    find /opt/hifi/backup/backups -type f -printf "%f\n" | sort

    read -p "Filename?: " CHOSENFILE
    echo "Using: " $CHOSENFILE
    sleep 1

    RESTOREFILEPATH="$HIFIBASEDIR/backup/backups/$CHOSENFILE"

    tar -xf $RESTOREFILEPATH -C $HIFIBASEDIR/backup/temp

    echo "Restore Server Code?"
    if doContinue $1;
        then
            stopHifi
            rm -rf $HIFIBASEDIR/live/build/*
            tar -zxvf $HIFIBASEDIR/backup/temp/SOURCE.tar.gz -C $HIFIBASEDIR/live/build
            echo "Restored"
            startHifi
        else
            echo "Skipping..."
    fi

    echo "Restore assets and location data?"
    if doContinue $1;
        then
            stopHifi
            rm -rf $HIFIBASEDIR/live/server-files/*
            tar -zxvf $HIFIBASEDIR/backup/temp/SERVER.tar.gz -C $HIFIBASEDIR/live/server-files
            echo "Restored"
            startHifi
        else
            echo "Skipping..."
    fi

    rm -rf $HIFIBASEDIR/backup/temp/*
}

function startHifi() {
    systemctl start domain-server.service
    systemctl start assignment-client.service
}

function stopHifi() {
    systemctl stop domain-server.service
    systemctl stop assignment-client.service
}

function restartHifi() {
    systemctl restart domain-server.service
    systemctl restart assignment-client.service
}

function trimBackups() {
    cd $HIFIBASEDIR/backup/backups
    ls -tr | head -n -10 | xargs -l -r sh -c 'echo Deleting $1 ON `date` && rm $1' --
}

function doCron() {
    doSave
    trimBackups
    #this helps me gauge community interest, without it I have no idea how many are using it or if I should continue to update it.
    curl -H "Content-Type: application/json" -X POST -d '{"type":"ping","name":"hifi-server"}' https://api.midnightrift.com/pingback
}

function updateByTag() {
    read -p "Tag Name?: " CHOSENTAG
    echo "Using: " $CHOSENTAG
    sleep 1

    if doContinue $1;
        then
            doSave verbose
            stopHifi
            cd $HIFIBASEDIR/source

            if $PRODUCTION;
                then
                    git pull origin stable
                else
                    git pull origin master
            fi
            git fetch

            git checkout -f tags/$CHOSENTAG

            rm -rf $HIFIBASEDIR/build/*

            cd $HIFIBASEDIR/build

            source scl_source enable devtoolset-4

            if $PRODUCTION;
                then
                    RELEASE_TYPE=PRODUCTION RELEASE_NUMBER=$(echo $CHOSENTAG | cut -d'-' -f2) cmake3 -DSERVER_ONLY=TRUE -DDCMAKE_BUILD_TYPE=Release $HIFIBASEDIR/source
                else
                    RELEASE_NUMBER=$(echo $CHOSENTAG | cut -d'-' -f2) cmake3 -DSERVER_ONLY=TRUE -DDCMAKE_BUILD_TYPE=Release $HIFIBASEDIR/source
            fi

            make domain-server && make assignment-client

            rm -rf $HIFIBASEDIR/live/build/*

            cp -R $HIFIBASEDIR/build/* $HIFIBASEDIR/live/build

            setPerms
            startHifi
        else
            exit
    fi
}

function releaseSource() {

    read -p "Source [ dev | prod ]: " RELEASE_SOURCE
    echo "Using: " $RELEASE_SOURCE

    if [[ $RELEASE_SOURCE =~ ^([Dd][Ee][Vv])$ ]]
        then

            if $PRODUCTION;
                then
                    sed -i '0,/PRODUCTION=true/s//PRODUCTION=false/' $HIFIBASEDIR/env.conf
                    echo "SUCCESS"
                else
                    echo "already dev mode"
            fi

            restartHifi

    elif [[ $RELEASE_SOURCE =~ ^([Pp][Rr][Oo][Dd])$ ]]
        then

            if $PRODUCTION;
                then
                    echo "already prod mode"
                else
                    sed -i '0,/PRODUCTION=false/s//PRODUCTION=true/' $HIFIBASEDIR/env.conf
                    echo "SUCCESS"
            fi

            restartHifi

    else
            echo "Not a valid option"
    fi
}

if [ "$2" != "" ];
    then
        echo "Single argument only."
        exit
fi

case $1 in
    --help)
        getHelp
        ;;
    --save)
        doSave verbose
        ;;
    --status)
        getStatus
        ;;
    --update)
        doUpdate
        ;;
    --update-hifi-server)
        updateHifiServer
        ;;
    --restore)
        doRestore
        ;;
    --start)
        startHifi
        ;;
    --stop)
        stopHifi
        ;;
    --restart)
        restartHifi
        ;;
    --trimbackups) #not listed in help
        trimBackups
        ;;
    --cron) #not listed in help
        doCron
        ;;
    --update-by-tag)
        updateByTag
        ;;
    --release-source)
        releaseSource
        ;;
    *)
        echo "ERROR: unknown parameter \"$1\""
        getHelp
        ;;
esac